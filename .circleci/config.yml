version: 2
jobs:
  test-node-10:
    docker:
      - image: circleci/node:10
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-10-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-10-{{ .Branch }}
            - yarn-cache-10-
      - run: yarn install
      - run: yarn types-install
      - save_cache:
          key: yarn-cache-10-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: [node_modules]
      - run: yarn testci
      - run: yarn types-ci

  test-node-12:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - yarn-cache-12-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-12-{{ .Branch }}
            - yarn-cache-12-

      - run: yarn install
      - run: yarn types-install

      - save_cache:
          key: yarn-cache-12-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: [node_modules]

      - run: yarn testci
      - run: yarn types-ci
      - run: yarn send-coverage
      - run: yarn docs:test

      - persist_to_workspace:
          root: .
          paths: [.]
      - store_artifacts:
          path: ./coverage/clover.xml
          prefix: tests
      - store_artifacts:
          path: coverage
          prefix: coverage
      - store_test_results:
          path: ./coverage/clover.xml

  test-node-latest:
    docker:
      - image: circleci/node
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-latest-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-latest-{{ .Branch }}
            - yarn-cache-latest-
      - run: yarn install
      - run: yarn types-install
      - save_cache:
          key: yarn-cache-latest-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: [node_modules]
      - run: yarn testci
      - run: yarn types-ci

  validate-dependencies:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-12-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-12-{{ .Branch }}
            - yarn-cache-12-

      - run: yarn install
      - run:
          name: yarn validate:dependencies
          command: |
            if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
              yarn validate:dependencies
            else
              echo "Skipping audit"
            fi
      - run: yarn types-install
      - run:
          name: yarn validate:dependencies
          command: |
            if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
              yarn types-validate:dependencies
            else
              echo "Skipping audit"
            fi

  validate-all-dependencies:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-12-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-12-{{ .Branch }}
            - yarn-cache-12-
            
      - run: yarn install
      - run: yarn validate:dependencies
      - run: yarn validate:dev-dependencies
      - run: yarn types-install
      - run: yarn types-validate:dependencies
      - run: yarn types-validate:dev-dependencies

  release:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      # Clean working tree and install dependencies
      - run: yarn reset
      - run: yarn install
      - run:
          name: Determine release type
          command: |
            PACKAGE_NAME=$(yarn info -s . name)
            PUBLISHED_VERSION=$(yarn info -s $PACKAGE_NAME version)
            THIS_VERSION=$(node -p "require('./package.json').version")

            # Simple bash helper to comapre version numbers
            verlte() {
              [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
            }
            verlt() {
              [ "$1" = "$2" ] && return 1 || verlte $1 $2
            }

            if verlt $PUBLISHED_VERSION $THIS_VERSION
            then
              echo 'export PUBLISH_ARGS="--tag latest"' >> $BASH_ENV
              echo "Publishing latest"
            else
              echo 'export PUBLISH_ARGS="--tag hotfix"' >> $BASH_ENV
              echo "Publishing hotfix"
            fi

            source $BASH_ENV
      - run: yarn build
      - run: yarn types-install
      - run: yarn types-build
      # Setup git
      - add_ssh_keys:
          fingerprints:
            - "ba:9e:70:ce:7e:1f:6c:cd:20:2e:ac:e7:ae:48:20:09"
      - run: mkdir -p ~/.ssh
      - run:
          name: Keyscan Github
          command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run: git config --global user.email "info@superfly.tv"
      - run: git config --global user.name "superflytvab"
      # Publish docs
      - run: 
          name: yarn docs:publish
          command: |
            if [[ $PUBLISH_ARGS == *"latest"* ]]; then
              echo "Publishing docs"
              yarn docs:publish 
            else
              echo "Skipping docs"
            fi
      # Publish npm
      - run:
          name: Write NPM Token to ~/.npmrc
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish to NPM with yarn
          command: NEW_VERSION=$(node -p "require('./package.json').version") && yarn publish --access=public --new-version=$NEW_VERSION --network-timeout 100000 $PUBLISH_ARGS
      # Also deploy types package to NPM:
      - run:
          name: Publish Types to NPM with yarn
          command: NEW_VERSION=$(node -p "require('./package.json').version") && cd src/types && yarn version --no-git-tag-version --new-version=$NEW_VERSION && yarn publish --access=public --new-version=$NEW_VERSION --network-timeout 100000 $PUBLISH_ARGS && cd ../..

  prerelease:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      # Clean working tree and install dependencies
      - run: yarn reset
      - run: yarn install
      # Locally bump the version
      - run: 
          name: yarn release
          command: |
            COMMIT_TIMESTAMP=$(git log -1 --pretty=format:%ct HEAD)
            COMMIT_DATE=$(date -d @$COMMIT_TIMESTAMP +%Y%m%d-%H%M%S)
            GIT_HASH=$(git rev-parse --short HEAD)

            if [[ "${CIRCLE_BRANCH}" == "master" ]]
            then
              PRERELEASE_TAG=nightly
              echo 'export PUBLISH_ARGS="--tag nightly"' >> $BASH_ENV
            else
              PRERELEASE_TAG=nightly-$(echo $CIRCLE_BRANCH | sed -r 's/[^a-z0-9]+/-/gi')
              echo 'export PUBLISH_ARGS="--tag experimental"' >> $BASH_ENV
            fi

            yarn release --prerelease $PRERELEASE_TAG-$COMMIT_DATE-$GIT_HASH --skip.changelog --skip.tag --skip.commit
      # Build and deploy
      - run: yarn build
      - run: yarn types-install
      - run: yarn types-build
      - run:
          name: Write NPM Token to ~/.npmrc
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Publish to NPM with yarn
          command: NEW_VERSION=$(node -p "require('./package.json').version") && yarn publish --access=public --new-version=$NEW_VERSION --network-timeout 100000 --tag experimental
      # Also deploy types package to NPM:
      - run:
          name: Publish Types to NPM with yarn
          command: NEW_VERSION=$(node -p "require('./package.json').version") && cd src/types && yarn version --no-git-tag-version --new-version=$NEW_VERSION && yarn publish --access=public --new-version=$NEW_VERSION --network-timeout 100000 --tag experimental && cd ../..

workflows:
  version: 2
  build-test-publish:
    jobs:
      - test-node-12
      - test-node-10
      - test-node-latest
      - validate-all-dependencies:
          filters:
            branches:
              only:
                - master
                - develop
      - validate-dependencies:
          filters:
            branches:
              only:
                - master
                - develop
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+.*/
      - prerelease:
          requires:
            - test-node-12
            - test-node-10
            - test-node-latest
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /.*/
      - release:
          requires:
            - validate-dependencies
            - test-node-12
            - test-node-10
            - test-node-latest
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/