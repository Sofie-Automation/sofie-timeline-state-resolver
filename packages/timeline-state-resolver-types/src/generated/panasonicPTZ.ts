/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and re-run the "tsr-schema-types" tool to regenerate this file.
 */
import { ActionExecutionResult } from ".."

export interface PanasonicPTZOptions {
	host: string
	port: number
	https?: boolean
}

export interface MappingPanasonicPTZPresetMem {
	mappingType: MappingPanasonicPTZType.PresetMem
}

export interface MappingPanasonicPTZPresetSpeed {
	mappingType: MappingPanasonicPTZType.PresetSpeed
}

export interface MappingPanasonicPTZZoomSpeed {
	mappingType: MappingPanasonicPTZType.ZoomSpeed
}

export interface MappingPanasonicPTZZoom {
	mappingType: MappingPanasonicPTZType.Zoom
}

export enum MappingPanasonicPTZType {
	PresetMem = 'presetMem',
	PresetSpeed = 'presetSpeed',
	ZoomSpeed = 'zoomSpeed',
	Zoom = 'zoom',
}

export type SomeMappingPanasonicPTZ = MappingPanasonicPTZPresetMem | MappingPanasonicPTZPresetSpeed | MappingPanasonicPTZZoomSpeed | MappingPanasonicPTZZoom

export interface SetPanTiltSpeedPayload {
	/**
	 * Pan Speed; Range: [-1.0, 1.0]; -1.0 = fastest LEFT, 0.0 = STOP, 1.0 = fastest RIGHT (each protocol might internally support a different range, which the value will be mapped into)
	 */
	panSpeed: number
	/**
	 * Tilt Speed; Range: [-1.0, 1.0]; -1.0 = fastest DOWN, 0.0 = STOP, 1.0 = fastest UP (each protocol might internally support a different range, which the value will be mapped into)
	 */
	tiltSpeed: number
}

export interface GetPanTiltPositionResult {
	/**
	 * Pan Position; Range: [-1.0, 1.0]; -1.0 = furthest LEFT, 0.0 = CENTER, 1.0 = furthest RIGHT (each protocol might internally support a different range, which the value will be mapped from)
	 */
	panPosition: number
	/**
	 * Tilt Position; Range: [-1.0, 1.0]; -1.0 = furthest DOWN, 0.0 = CENTER, 1.0 = furthest UP (each protocol might internally support a different range, which the value will be mapped from)
	 */
	tiltPosition: number
}

export interface SetZoomSpeedPayload {
	/**
	 * Zoom Speed; Range: [-1.0, 1.0]; -1.0 = fastest WIDE, 0.0 = STOP, 1.0 = fastest TELE (each protocol might internally support a different range, which the value will be mapped into)
	 */
	zoomSpeed: number
}

export interface GetZoomPositionResult {
	/**
	 * Zoom Position; Range: [0.0, 1.0]; 0.0 = furthest WIDE, 1.0 = furthest TELE (each protocol might internally support a different range, which the value will be mapped from)
	 */
	zoomPosition: number
}

export interface StorePresetPayload {
	/**
	 * Preset number, within the range supported by the camera
	 */
	presetNumber: number
}

export interface RecallPresetPayload {
	/**
	 * Preset number, within the range supported by the camera
	 */
	presetNumber: number
}

export interface ResetPresetPayload {
	/**
	 * Preset number, within the range supported by the camera
	 */
	presetNumber: number
}

export interface SetFocusSpeedPayload {
	/**
	 * Focus Speed; Range: [-1.0, 1.0]; -1.0 = fastest NEAR, 0.0 = STOP, 1.0 = fastest FAR (each protocol might internally support a different range, which the value will be mapped into)
	 */
	focusSpeed: number
}

export interface SetFocusModePayload {
	mode: FocusMode
}

export enum FocusMode {
	AUTO = 'auto',
	MANUAL = 'manual'
}

export interface GetFocusPositionResult {
	/**
	 * Focus Position; Range: [0.0, 1.0]; 0.0 = furthest NEAR, 1.0 = furthest FAR (each protocol might internally support a different range, which the value will be mapped from)
	 */
	focusPosition: number
}

export type FocusModeResult = FocusMode

export interface GetFocusModeResult {
	mode: FocusModeResult
}

export enum PanasonicPTZActions {
	SetPanTiltSpeed = 'setPanTiltSpeed',
	GetPanTiltPosition = 'getPanTiltPosition',
	SetZoomSpeed = 'setZoomSpeed',
	GetZoomPosition = 'getZoomPosition',
	StorePreset = 'storePreset',
	RecallPreset = 'recallPreset',
	ResetPreset = 'resetPreset',
	SetFocusSpeed = 'setFocusSpeed',
	SetFocusMode = 'setFocusMode',
	TriggerOnePushFocus = 'triggerOnePushFocus',
	GetFocusPosition = 'getFocusPosition',
	GetFocusMode = 'getFocusMode'
}
export interface PanasonicPTZActionMethods {
	[PanasonicPTZActions.SetPanTiltSpeed]: (payload: SetPanTiltSpeedPayload) => Promise<ActionExecutionResult<void>>,
	[PanasonicPTZActions.GetPanTiltPosition]: (payload: Record<string, never>) => Promise<ActionExecutionResult<GetPanTiltPositionResult>>,
	[PanasonicPTZActions.SetZoomSpeed]: (payload: SetZoomSpeedPayload) => Promise<ActionExecutionResult<void>>,
	[PanasonicPTZActions.GetZoomPosition]: (payload: Record<string, never>) => Promise<ActionExecutionResult<GetZoomPositionResult>>,
	[PanasonicPTZActions.StorePreset]: (payload: StorePresetPayload) => Promise<ActionExecutionResult<void>>,
	[PanasonicPTZActions.RecallPreset]: (payload: RecallPresetPayload) => Promise<ActionExecutionResult<void>>,
	[PanasonicPTZActions.ResetPreset]: (payload: ResetPresetPayload) => Promise<ActionExecutionResult<void>>,
	[PanasonicPTZActions.SetFocusSpeed]: (payload: SetFocusSpeedPayload) => Promise<ActionExecutionResult<void>>,
	[PanasonicPTZActions.SetFocusMode]: (payload: SetFocusModePayload) => Promise<ActionExecutionResult<void>>,
	[PanasonicPTZActions.TriggerOnePushFocus]: (payload: Record<string, never>) => Promise<ActionExecutionResult<void>>,
	[PanasonicPTZActions.GetFocusPosition]: (payload: Record<string, never>) => Promise<ActionExecutionResult<GetFocusPositionResult>>,
	[PanasonicPTZActions.GetFocusMode]: (payload: Record<string, never>) => Promise<ActionExecutionResult<GetFocusModeResult>>
}

export interface PanasonicPTZDeviceTypes {
	Options: PanasonicPTZOptions
	Mappings: SomeMappingPanasonicPTZ
	Actions: PanasonicPTZActionMethods
}
