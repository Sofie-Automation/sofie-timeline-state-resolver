import { compile, compileFromFile } from 'json-schema-to-typescript'
import * as fs from 'fs/promises'
import PrettierConf from '@sofie-automation/code-standard-preset/.prettierrc.json' assert { type: 'json' }

/** ********************************************************
 *
 * This script goes through the json-schemas of all devices (located under /$schemas )
 * and auto-generates types for those schemas
 *
 * @todo: auto generate the interfaces.ts in /src as well
 * @todo: write meta schemas for options & mappings
 *
 ***********************************************************/

const dirs = (await fs.readdir('./src/integrations', { withFileTypes: true }))
	.filter((c) => c.isDirectory())
	.map((d) => d.name)
const capitalise = (s) => s.slice(0, 1).toUpperCase() + s.slice(1)
const BANNER =
	'/**\n * This file was automatically generated by json-schema-to-typescript.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n * and run "yarn generate-schema-types" to regenerate this file.\n */'
let indexFile = BANNER

for (const dir of dirs) {
	const path = './src/integrations/' + dir
	try {
		if (!(await fs.stat(path + '/$schemas'))) continue
	} catch {
		continue
	}

	let output = BANNER

	try {
		// compile options from file
		const options = await compileFromFile(path + '/$schemas/options.json', {
			additionalProperties: false,
			style: PrettierConf,
			bannerComment: '',
		})
		output += '\n' + options
	} catch {
		console.error('Error while generating options for ' + path + ', continuing...')
	}

	// compile mappings from file
	try {
		const mappingDescr = JSON.parse(await fs.readFile(path + '/$schemas/mappings.json'))
		for (const mapping of mappingDescr) {
			const mappingTypes = await compile(mapping, 'Mappings', {
				additionalProperties: false,
				style: PrettierConf,
				bannerComment: '',
			})
			output += '\n' + mappingTypes
		}
	} catch (e) {
		console.error('Error while generating mappings for ' + path + ', continuing...')
	}

	// compile actions from file
	const actionIds = []
	try {
		const actionsDescr = JSON.parse(await fs.readFile(path + '/$schemas/actions.json'))
		for (const action of actionsDescr.actions) {
			actionIds.push(action.id)
			if (!action.payload) continue

			const actionTypes = await compile(action.payload, action.id + 'Payload', {
				additionalProperties: false,
				style: PrettierConf,
				bannerComment: '',
			})
			output += '\n' + actionTypes
		}
	} catch (e) {
		console.error('Error while generating actions for ' + path + ', continuing...')
	}

	// very crude way to create an enum for the actionIds:
	let actionEnum = 'export enum ' + capitalise(dir) + 'Actions {\n'
	for (const id of actionIds) {
		actionEnum += '\t' + capitalise(id) + " = '" + id + "',\n"
	}
	actionEnum += '}\n'

	output += '\n' + actionEnum

	fs.writeFile('../timeline-state-resolver-types/src/generated/' + dir + '.ts', output)
	fs.writeFile(
		path + '/interfaces.ts',
		`${BANNER}\nexport * from 'timeline-state-resolver-types/dist/generated/${dir}'\n`
	)
	console.log('Wrote ' + dir + '.ts')

	indexFile += `\nexport * from './${dir}'`
}

fs.writeFile('../timeline-state-resolver-types/src/generated/index.ts', indexFile + '\n')
