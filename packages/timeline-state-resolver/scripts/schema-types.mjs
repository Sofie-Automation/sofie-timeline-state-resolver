import { compile, compileFromFile } from 'json-schema-to-typescript'
import * as fs from 'fs/promises'
import PrettierConf from '@sofie-automation/code-standard-preset/.prettierrc.json' assert { type: 'json' }

const paths = (await fs.readdir('./src/integrations', { withFileTypes: true }))
	.filter((c) => c.isDirectory())
	.map((d) => './src/integrations/' + d.name)

for (const path of paths) {
	try {
		if (!(await fs.stat(path + '/$schemas'))) continue
	} catch {
		continue
	}

	let output =
		'/* tslint:disable */\n/**\n * This file was automatically generated by json-schema-to-typescript.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n * and run schema-types to regenerate this file.\n */'

	try {
		// compile options from file
		const options = await compileFromFile(path + '/$schemas/options.json', {
			additionalProperties: false,
			style: PrettierConf,
			bannerComment: '',
		})
		output += '\n' + options
	} catch {
		console.error('Error while generating options for ' + path + ', continuing...')
	}

	// compile mappings from file
	try {
		const mappingDescr = JSON.parse(await fs.readFile(path + '/$schemas/mappings.json'))
		for (const mapping of mappingDescr) {
			const mappingTypes = await compile(mapping, 'Mappings', {
				additionalProperties: false,
				style: PrettierConf,
				bannerComment: '',
			})
			output += '\n' + mappingTypes
		}
	} catch (e) {
		console.error(e)
		console.error('Error while generating mappings for ' + path + ', continuing...')
	}

	// compile actions from file
	const actionIds = []
	try {
		const actionsDescr = JSON.parse(await fs.readFile(path + '/$schemas/actions.json'))
		for (const action of actionsDescr) {
			actionIds.push(action.id)
			if (!action.payload) continue

			const actionTypes = await compile(action.payload, 'Mappings', {
				additionalProperties: false,
				style: PrettierConf,
				bannerComment: '',
			})
			output += '\n' + actionTypes
		}
	} catch (e) {
		console.error(e)
		console.error('Error while generating actions for ' + path + ', continuing...')
	}

	// very crude way to create an enum for the actionIds:
	let actionEnum = 'export enum Actions {\n'
	for (const id of actionIds) {
		actionEnum += '\t' + id.slice(0, 1).toUpperCase() + id.slice(1) + " = '" + id + "',\n"
	}
	actionEnum += '}\n'

	output += '\n' + actionEnum

	fs.writeFile(path + '/interfaces.ts', output)
}
